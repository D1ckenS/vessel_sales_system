# Generated by Django 5.2.1 on 2025-08-17 21:10

from django.db import migrations


def populate_initial_vessel_assignments(apps, schema_editor):
    """
    Create initial vessel assignments for existing users.
    
    Logic:
    - SuperUsers: Get automatic access (handled in model)
    - Staff users (Admins/Managers): Assign to all active vessels
    - Regular users: Assign to first active vessel as default
    """
    User = apps.get_model('auth', 'User')
    Vessel = apps.get_model('vessels', 'Vessel')
    UserVesselAssignment = apps.get_model('vessel_management', 'UserVesselAssignment')
    
    # Get all active vessels
    active_vessels = list(Vessel.objects.filter(active=True))
    
    if not active_vessels:
        # No active vessels, skip assignment
        return
    
    # Process each user
    for user in User.objects.all():
        if user.is_superuser:
            # SuperUsers get automatic access, no need to create assignments
            continue
        
        elif user.is_staff:
            # Staff users (Admins/Managers) get access to all active vessels
            for vessel in active_vessels:
                UserVesselAssignment.objects.get_or_create(
                    user=user,
                    vessel=vessel,
                    defaults={
                        'is_active': True,
                        'can_make_sales': True,
                        'can_receive_inventory': True,
                        'can_initiate_transfers': True,
                        'can_approve_transfers': True,
                        'notes': 'Initial assignment during migration - Staff user with multi-vessel access'
                    }
                )
        
        else:
            # Regular users get assigned to the first active vessel
            first_vessel = active_vessels[0]
            UserVesselAssignment.objects.get_or_create(
                user=user,
                vessel=first_vessel,
                defaults={
                    'is_active': True,
                    'can_make_sales': True,
                    'can_receive_inventory': True,
                    'can_initiate_transfers': True,
                    'can_approve_transfers': True,
                    'notes': f'Initial assignment during migration - Assigned to {first_vessel.name}'
                }
            )


def reverse_vessel_assignments(apps, schema_editor):
    """
    Remove all vessel assignments if migration is reversed.
    """
    UserVesselAssignment = apps.get_model('vessel_management', 'UserVesselAssignment')
    UserVesselAssignment.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('vessel_management', '0001_create_vessel_management_models'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('vessels', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            populate_initial_vessel_assignments,
            reverse_vessel_assignments,
            elidable=True,
        ),
    ]
