# Generated by Django 5.2.1 on 2025-08-17 21:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0005_alter_product_category'),
        ('transactions', '0016_add_database_integrity_constraints_fixed'),
        ('vessels', '0003_add_database_integrity_constraints_fixed'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TransferWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('created', 'Created'), ('pending_review', 'Pending Review'), ('under_review', 'Under Review'), ('pending_confirmation', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='created', max_length=25)),
                ('from_user_confirmed', models.BooleanField(default=False)),
                ('to_user_confirmed', models.BooleanField(default=False)),
                ('mutual_agreement', models.BooleanField(default=False)),
                ('has_edits', models.BooleanField(default=False)),
                ('last_edited_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('base_transfer', models.OneToOneField(help_text='Link to the base transfer record', on_delete=django.db.models.deletion.CASCADE, related_name='workflow', to='transactions.transfer')),
                ('from_user', models.ForeignKey(help_text='User who initiated the transfer (From Vessel)', on_delete=django.db.models.deletion.PROTECT, related_name='initiated_transfers', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_edited_transfers', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(help_text='User responsible for receiving transfer (To Vessel)', on_delete=django.db.models.deletion.PROTECT, related_name='assigned_transfers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transfer Workflow',
                'verbose_name_plural': 'Transfer Workflows',
                'db_table': 'vessel_management_transfer_workflow',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransferNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('transfer_submitted', 'Transfer Submitted'), ('review_started', 'Review Started'), ('edits_made', 'Quantities Edited'), ('transfer_confirmed', 'Transfer Confirmed'), ('transfer_rejected', 'Transfer Rejected'), ('transfer_completed', 'Transfer Completed'), ('comment_added', 'Comment Added'), ('reminder', 'Reminder')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('action_url', models.URLField(blank=True, help_text='URL to relevant action page')),
                ('is_read', models.BooleanField(default=False)),
                ('is_urgent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_notifications', to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='vessel_management.transferworkflow')),
            ],
            options={
                'verbose_name': 'Transfer Notification',
                'verbose_name_plural': 'Transfer Notifications',
                'db_table': 'vessel_management_transfer_notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransferItemEdit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_quantity', models.DecimalField(decimal_places=3, help_text='Original quantity requested by From User', max_digits=10)),
                ('edited_quantity', models.DecimalField(decimal_places=3, help_text='New quantity set by To User', max_digits=10)),
                ('edited_at', models.DateTimeField(auto_now_add=True)),
                ('edit_reason', models.TextField(help_text='Reason for quantity change')),
                ('edited_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_edits', to='vessel_management.transferworkflow')),
            ],
            options={
                'verbose_name': 'Transfer Item Edit',
                'verbose_name_plural': 'Transfer Item Edits',
                'db_table': 'vessel_management_transfer_item_edit',
                'ordering': ['-edited_at'],
            },
        ),
        migrations.CreateModel(
            name='TransferApprovalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('created', 'Transfer Created'), ('submitted', 'Submitted for Review'), ('review_started', 'Review Started'), ('quantities_edited', 'Quantities Edited'), ('confirmed_by_to_user', 'Confirmed by To User'), ('confirmed_by_from_user', 'Confirmed by From User'), ('rejected', 'Transfer Rejected'), ('completed', 'Transfer Completed'), ('cancelled', 'Transfer Cancelled'), ('comment_added', 'Comment Added')], max_length=25)),
                ('performed_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('previous_status', models.CharField(blank=True, max_length=25)),
                ('new_status', models.CharField(blank=True, max_length=25)),
                ('action_data', models.JSONField(blank=True, default=dict, help_text='Additional action-specific data')),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_history', to='vessel_management.transferworkflow')),
            ],
            options={
                'verbose_name': 'Transfer Approval History',
                'verbose_name_plural': 'Transfer Approval Histories',
                'db_table': 'vessel_management_transfer_approval_history',
                'ordering': ['-performed_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryLotStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('available', 'Available'), ('pending_approval', 'Pending Approval'), ('confirmed_by_from_user', 'Confirmed by From User'), ('confirmed_by_to_user', 'Confirmed by To User'), ('transferred', 'Transferred')], default='available', max_length=25)),
                ('quantity_affected', models.DecimalField(decimal_places=3, help_text='Quantity involved in this transfer', max_digits=10)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_by', models.ForeignKey(blank=True, help_text='User who confirmed this lot status', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('inventory_lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_statuses', to='transactions.inventorylot')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lot_statuses', to='vessel_management.transferworkflow')),
            ],
            options={
                'verbose_name': 'Inventory Lot Status',
                'verbose_name_plural': 'Inventory Lot Statuses',
                'db_table': 'vessel_management_inventory_lot_status',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserVesselAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, help_text='Assignment notes')),
                ('can_make_sales', models.BooleanField(default=True)),
                ('can_receive_inventory', models.BooleanField(default=True)),
                ('can_initiate_transfers', models.BooleanField(default=True)),
                ('can_approve_transfers', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who created this assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vessel_assignments', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vessel_assignments', to=settings.AUTH_USER_MODEL)),
                ('vessel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='vessels.vessel')),
            ],
            options={
                'verbose_name': 'User Vessel Assignment',
                'verbose_name_plural': 'User Vessel Assignments',
                'db_table': 'vessel_management_user_vessel_assignment',
                'ordering': ['vessel__name', 'user__username'],
            },
        ),
        migrations.AddIndex(
            model_name='transferworkflow',
            index=models.Index(fields=['status', 'created_at'], name='transfer_workflow_status_created_idx'),
        ),
        migrations.AddIndex(
            model_name='transferworkflow',
            index=models.Index(fields=['from_user', 'status'], name='transfer_workflow_from_user_status_idx'),
        ),
        migrations.AddIndex(
            model_name='transferworkflow',
            index=models.Index(fields=['to_user', 'status'], name='transfer_workflow_to_user_status_idx'),
        ),
        migrations.AddIndex(
            model_name='transferworkflow',
            index=models.Index(fields=['submitted_at'], name='transfer_workflow_submitted_idx'),
        ),
        migrations.AddConstraint(
            model_name='transferworkflow',
            constraint=models.CheckConstraint(condition=models.Q(('from_user', models.F('to_user')), _negated=True), name='transfer_workflow_different_users'),
        ),
        migrations.AddConstraint(
            model_name='transferworkflow',
            constraint=models.CheckConstraint(condition=models.Q(('mutual_agreement', False), models.Q(('from_user_confirmed', True), ('to_user_confirmed', True)), _connector='OR'), name='transfer_workflow_mutual_agreement_logic'),
        ),
        migrations.AddIndex(
            model_name='transfernotification',
            index=models.Index(fields=['recipient', 'is_read'], name='transfer_notification_user_read_idx'),
        ),
        migrations.AddIndex(
            model_name='transfernotification',
            index=models.Index(fields=['notification_type', 'created_at'], name='transfer_notification_type_date_idx'),
        ),
        migrations.AddIndex(
            model_name='transfernotification',
            index=models.Index(fields=['is_urgent', 'is_read'], name='transfer_notification_urgent_read_idx'),
        ),
        migrations.AddIndex(
            model_name='transferitemedit',
            index=models.Index(fields=['workflow', 'product'], name='transfer_edit_workflow_product_idx'),
        ),
        migrations.AddIndex(
            model_name='transferitemedit',
            index=models.Index(fields=['edited_by', 'edited_at'], name='transfer_edit_user_date_idx'),
        ),
        migrations.AddConstraint(
            model_name='transferitemedit',
            constraint=models.CheckConstraint(condition=models.Q(('original_quantity__gt', 0)), name='transfer_edit_positive_original_quantity'),
        ),
        migrations.AddConstraint(
            model_name='transferitemedit',
            constraint=models.CheckConstraint(condition=models.Q(('edited_quantity__gt', 0)), name='transfer_edit_positive_edited_quantity'),
        ),
        migrations.AddConstraint(
            model_name='transferitemedit',
            constraint=models.CheckConstraint(condition=models.Q(('original_quantity', models.F('edited_quantity')), _negated=True), name='transfer_edit_quantity_changed'),
        ),
        migrations.AddIndex(
            model_name='transferapprovalhistory',
            index=models.Index(fields=['workflow', 'performed_at'], name='transfer_history_workflow_date_idx'),
        ),
        migrations.AddIndex(
            model_name='transferapprovalhistory',
            index=models.Index(fields=['action_type', 'performed_at'], name='transfer_history_action_date_idx'),
        ),
        migrations.AddIndex(
            model_name='transferapprovalhistory',
            index=models.Index(fields=['performed_by'], name='transfer_history_user_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorylotstatus',
            index=models.Index(fields=['status', 'created_at'], name='lot_status_status_created_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorylotstatus',
            index=models.Index(fields=['inventory_lot', 'status'], name='lot_status_lot_status_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorylotstatus',
            index=models.Index(fields=['workflow'], name='lot_status_workflow_idx'),
        ),
        migrations.AddConstraint(
            model_name='inventorylotstatus',
            constraint=models.CheckConstraint(condition=models.Q(('quantity_affected__gt', 0)), name='lot_status_positive_quantity'),
        ),
        migrations.AlterUniqueTogether(
            name='inventorylotstatus',
            unique_together={('inventory_lot', 'workflow')},
        ),
        migrations.AddIndex(
            model_name='uservesselassignment',
            index=models.Index(fields=['user', 'is_active'], name='vessel_assignment_user_active_idx'),
        ),
        migrations.AddIndex(
            model_name='uservesselassignment',
            index=models.Index(fields=['vessel', 'is_active'], name='vessel_assignment_vessel_active_idx'),
        ),
        migrations.AddIndex(
            model_name='uservesselassignment',
            index=models.Index(fields=['assigned_date'], name='vessel_assignment_date_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='uservesselassignment',
            unique_together={('user', 'vessel')},
        ),
    ]
