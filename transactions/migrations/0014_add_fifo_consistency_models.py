# Generated by Django 5.2.1 on 2025-08-11 11:28

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_alter_product_purchase_price'),
        ('transactions', '0013_add_supply_breakdown_fields'),
        ('vessels', '0002_vessel_name_ar'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CacheVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(help_text='Unique cache key identifier', max_length=100, unique=True)),
                ('version', models.BigIntegerField(default=1, help_text='Current version number')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Cache Version',
                'verbose_name_plural': 'Cache Versions',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['cache_key'], name='cache_version_key_idx'), models.Index(fields=['updated_at'], name='cache_version_updated_idx')],
            },
        ),
        migrations.CreateModel(
            name='FIFOConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumed_quantity', models.DecimalField(decimal_places=3, help_text='Exact quantity consumed from this lot', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_cost', models.DecimalField(decimal_places=6, help_text='Exact unit cost from the lot at time of consumption', max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('sequence', models.PositiveIntegerField(help_text='Order of consumption within the transaction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inventory_lot', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='transactions.inventorylot')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fifo_consumptions', to='transactions.transaction')),
            ],
            options={
                'verbose_name': 'FIFO Consumption Detail',
                'verbose_name_plural': 'FIFO Consumption Details',
                'ordering': ['sequence'],
                'indexes': [models.Index(fields=['transaction', 'sequence'], name='fifo_consumption_tx_seq_idx'), models.Index(fields=['inventory_lot'], name='fifo_consumption_lot_idx')],
                'unique_together': {('transaction', 'sequence')},
            },
        ),
        migrations.CreateModel(
            name='InventoryEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('LOT_CREATED', 'Inventory Lot Created'), ('LOT_CONSUMED', 'Inventory Lot Consumed'), ('LOT_RESTORED', 'Inventory Lot Restored'), ('TRANSFER_SENT', 'Inventory Transferred Out'), ('TRANSFER_RECEIVED', 'Inventory Transferred In'), ('WASTE_REMOVED', 'Inventory Wasted/Removed')], max_length=20)),
                ('quantity_change', models.DecimalField(decimal_places=3, help_text='Quantity change (positive for additions, negative for consumption)', max_digits=10)),
                ('unit_cost', models.DecimalField(decimal_places=6, help_text='Unit cost associated with this change', max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('lot_remaining_after', models.IntegerField(help_text='Remaining quantity in lot after this event')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Additional context about this event')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('inventory_lot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='transactions.inventorylot')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='transactions.transaction')),
                ('vessel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vessels.vessel')),
            ],
            options={
                'verbose_name': 'Inventory Event',
                'verbose_name_plural': 'Inventory Events',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['vessel', 'product', 'timestamp'], name='inventory_event_vpt_idx'), models.Index(fields=['event_type', 'timestamp'], name='inventory_event_type_time_idx'), models.Index(fields=['transaction'], name='inventory_event_tx_idx'), models.Index(fields=['inventory_lot'], name='inventory_event_lot_idx')],
            },
        ),
        migrations.CreateModel(
            name='TransferOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('ROLLED_BACK', 'Rolled Back')], default='PENDING', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if operation failed')),
                ('transfer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='transactions.transfer')),
                ('transfer_in_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfer_in_operations', to='transactions.transaction')),
                ('transfer_out_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfer_out_operations', to='transactions.transaction')),
            ],
            options={
                'verbose_name': 'Transfer Operation',
                'verbose_name_plural': 'Transfer Operations',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['transfer_group', 'status'], name='transfer_op_group_status_idx'), models.Index(fields=['status', 'created_at'], name='transfer_op_status_time_idx')],
            },
        ),
    ]
