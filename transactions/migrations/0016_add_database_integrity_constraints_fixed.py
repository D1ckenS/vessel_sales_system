# Generated by Django 5.2.1 on 2025-08-12 06:07

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0004_add_database_integrity_constraints_fixed'),
        ('transactions', '0015_fix_inventory_event_cascade'),
        ('vessels', '0003_add_database_integrity_constraints_fixed'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddConstraint(
            model_name='fifoconsumption',
            constraint=models.CheckConstraint(condition=models.Q(('consumed_quantity__gt', 0)), name='fifo_consumption_positive_quantity'),
        ),
        migrations.AddConstraint(
            model_name='fifoconsumption',
            constraint=models.CheckConstraint(condition=models.Q(('unit_cost__gt', 0)), name='fifo_consumption_positive_unit_cost'),
        ),
        migrations.AddConstraint(
            model_name='fifoconsumption',
            constraint=models.CheckConstraint(condition=models.Q(('sequence__gt', 0)), name='fifo_consumption_positive_sequence'),
        ),
        migrations.AddConstraint(
            model_name='inventorylot',
            constraint=models.CheckConstraint(condition=models.Q(('purchase_price__gt', 0)), name='inventorylot_positive_purchase_price'),
        ),
        migrations.AddConstraint(
            model_name='inventorylot',
            constraint=models.CheckConstraint(condition=models.Q(('original_quantity__gt', 0)), name='inventorylot_positive_original_quantity'),
        ),
        migrations.AddConstraint(
            model_name='inventorylot',
            constraint=models.CheckConstraint(condition=models.Q(('remaining_quantity__gte', 0)), name='inventorylot_non_negative_remaining_quantity'),
        ),
        migrations.AddConstraint(
            model_name='inventorylot',
            constraint=models.CheckConstraint(condition=models.Q(('remaining_quantity__lte', models.F('original_quantity'))), name='inventorylot_remaining_not_exceed_original'),
        ),
        migrations.AddConstraint(
            model_name='inventorylot',
            constraint=models.CheckConstraint(condition=models.Q(('purchase_date__gte', '1900-01-01')), name='inventorylot_purchase_date_reasonable'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gt', 0)), name='transaction_positive_quantity'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__isnull', True), ('unit_price__gt', 0), _connector='OR'), name='transaction_positive_unit_price'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('boxes__isnull', True), ('boxes__gt', 0), _connector='OR'), name='transaction_positive_boxes'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('items_per_box__isnull', True), ('items_per_box__gt', 0), _connector='OR'), name='transaction_positive_items_per_box'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('transfer_to_vessel__isnull', True), models.Q(('transfer_to_vessel', models.F('vessel')), _negated=True), _connector='OR'), name='transaction_different_transfer_to_vessel'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('transfer_from_vessel__isnull', True), models.Q(('transfer_from_vessel', models.F('vessel')), _negated=True), _connector='OR'), name='transaction_different_transfer_from_vessel'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('transfer_to_vessel__isnull', True), ('transaction_type', 'TRANSFER_OUT'), _connector='OR'), name='transaction_transfer_to_only_for_out'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('transfer_from_vessel__isnull', True), ('transaction_type', 'TRANSFER_IN'), _connector='OR'), name='transaction_transfer_from_only_for_in'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('damage_reason', ''), ('transaction_type', 'WASTE'), _connector='OR'), name='transaction_damage_reason_only_for_waste'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('trip__isnull', True), ('transaction_type', 'SALE'), _connector='OR'), name='transaction_trip_only_for_sale'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('purchase_order__isnull', True), ('transaction_type', 'SUPPLY'), _connector='OR'), name='transaction_po_only_for_supply'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(condition=models.Q(('waste_report__isnull', True), ('transaction_type', 'WASTE'), _connector='OR'), name='transaction_waste_report_only_for_waste'),
        ),
        migrations.AddConstraint(
            model_name='trip',
            constraint=models.CheckConstraint(condition=models.Q(('trip_number', ''), _negated=True), name='trip_number_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='trip',
            constraint=models.CheckConstraint(condition=models.Q(('passenger_count__gt', 0)), name='trip_positive_passenger_count'),
        ),
        migrations.AddConstraint(
            model_name='trip',
            constraint=models.CheckConstraint(condition=models.Q(('trip_date__gte', '2020-01-01')), name='trip_date_reasonable'),
        ),
    ]
