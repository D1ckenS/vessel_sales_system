# VESSEL SALES SYSTEM - COMPREHENSIVE TEST SCENARIOS
# =====================================================
# Test scenarios to verify all functionality works correctly after REST API implementation
# Last Updated: August 17, 2025

## TABLE OF CONTENTS
1. Core Django System Tests
2. Authentication & Authorization Tests
3. FIFO Inventory Management Tests
4. REST API Functionality Tests
5. Security Feature Tests
6. Frontend Integration Tests
7. Database Integrity Tests
8. Performance & Load Tests
9. Export & Reporting Tests
10. Management Commands Tests

## 1. CORE DJANGO SYSTEM TESTS
=================================

### 1.1 Basic System Startup
- [ ] Server starts without errors: `python manage.py runserver`
- [ ] Admin interface accessible: http://localhost:8000/admin/
- [ ] Main dashboard loads: http://localhost:8000/
- [ ] Static files serve correctly
- [ ] Database connections work properly

### 1.2 Model Functionality
- [ ] All models can be imported without errors
- [ ] Model relationships work correctly
- [ ] Model constraints are enforced
- [ ] Model string representations display correctly

### 1.3 URL Routing
- [ ] All frontend URLs resolve correctly
- [ ] API URLs resolve correctly: http://localhost:8000/api/v1/
- [ ] Error pages (404, 500) display properly
- [ ] Redirects work as expected

## 2. AUTHENTICATION & AUTHORIZATION TESTS
==========================================

### 2.1 User Authentication
- [ ] User login via web interface works
- [ ] User logout functionality works
- [ ] Password reset functionality works
- [ ] Session management works correctly
- [ ] User permissions are enforced

### 2.2 JWT Authentication (API)
- [ ] JWT token generation: POST /api/auth/token/
- [ ] JWT token refresh: POST /api/auth/token/refresh/
- [ ] Protected endpoints require valid JWT
- [ ] Expired tokens are rejected
- [ ] Invalid tokens are rejected

### 2.3 Permission System
- [ ] Group-based permissions work
- [ ] User-specific permissions work
- [ ] API endpoints respect permissions
- [ ] Frontend pages respect permissions

### 2.4 Security Features
- [ ] Brute force protection (django-axes) works
- [ ] Rate limiting on API endpoints works
- [ ] Security headers are present in responses
- [ ] CSRF protection works on forms

## 3. FIFO INVENTORY MANAGEMENT TESTS
====================================

### 3.1 Supply Operations
- [ ] Create new supply transaction
- [ ] Verify inventory lot creation
- [ ] Test bulk supply operations
- [ ] Verify cost tracking accuracy

### 3.2 Sales Operations
- [ ] Create new sale transaction
- [ ] Verify FIFO consumption logic
- [ ] Test insufficient stock scenarios
- [ ] Verify cost calculation accuracy

### 3.3 Transfer Operations
- [ ] Create vessel-to-vessel transfers
- [ ] Verify atomic transfer operations
- [ ] Test transfer completion workflow
- [ ] Verify inventory consistency

### 3.4 Waste Operations
- [ ] Create waste transactions
- [ ] Verify inventory deduction
- [ ] Test waste reporting
- [ ] Verify cost tracking

### 3.5 Inventory Integrity
- [ ] Run inventory rebuild command
- [ ] Verify inventory reconciliation
- [ ] Test database integrity checks
- [ ] Validate FIFO consumption records

## 4. REST API FUNCTIONALITY TESTS
==================================

### 4.1 Vessel Management API
- [ ] GET /api/v1/vessels/ (list vessels)
- [ ] GET /api/v1/vessels/{id}/ (vessel detail)
- [ ] POST /api/v1/vessels/ (create vessel)
- [ ] PUT /api/v1/vessels/{id}/ (update vessel)
- [ ] DELETE /api/v1/vessels/{id}/ (delete vessel)
- [ ] GET /api/v1/vessels/summary/ (vessel summary)
- [ ] GET /api/v1/vessels/{id}/inventory_summary/
- [ ] GET /api/v1/vessels/{id}/recent_activity/

### 4.2 Product Management API
- [ ] GET /api/v1/products/ (list products)
- [ ] GET /api/v1/products/{id}/ (product detail)
- [ ] POST /api/v1/products/ (create product)
- [ ] PUT /api/v1/products/{id}/ (update product)
- [ ] DELETE /api/v1/products/{id}/ (delete product)
- [ ] GET /api/v1/products/search/ (search products)
- [ ] GET /api/v1/products/{id}/stock_levels/
- [ ] GET /api/v1/products/{id}/sales_history/
- [ ] GET /api/v1/products/low_stock/

### 4.3 Transaction Management API
- [ ] GET /api/v1/transactions/ (list transactions)
- [ ] GET /api/v1/transactions/{id}/ (transaction detail)
- [ ] POST /api/v1/transactions/ (create transaction)
- [ ] PUT /api/v1/transactions/{id}/ (update transaction)
- [ ] DELETE /api/v1/transactions/{id}/ (delete transaction)
- [ ] POST /api/v1/transactions/bulk_create/
- [ ] GET /api/v1/transactions/sales_summary/
- [ ] GET /api/v1/transactions/inventory_status/

### 4.4 Category Management API
- [ ] GET /api/v1/categories/ (list categories)
- [ ] GET /api/v1/categories/{id}/ (category detail)
- [ ] POST /api/v1/categories/ (create category)
- [ ] PUT /api/v1/categories/{id}/ (update category)
- [ ] DELETE /api/v1/categories/{id}/ (delete category)
- [ ] GET /api/v1/categories/{id}/products/ (FIXED: related_name issue resolved)

### 4.5 User Management API
- [ ] GET /api/v1/users/ (list users)
- [ ] GET /api/v1/users/{id}/ (user detail)
- [ ] POST /api/v1/users/ (create user)
- [ ] PUT /api/v1/users/{id}/ (update user)
- [ ] GET /api/v1/users/profile/ (current user profile)
- [ ] PUT /api/v1/users/profile/ (update profile)

### 4.6 Inventory Lot API
- [ ] GET /api/v1/inventory-lots/ (list lots)
- [ ] GET /api/v1/inventory-lots/{id}/ (lot detail)
- [ ] GET /api/v1/inventory-lots/fifo_order/

### 4.7 Trip Management API
- [ ] GET /api/v1/trips/ (list trips)
- [ ] GET /api/v1/trips/{id}/ (trip detail)
- [ ] POST /api/v1/trips/ (create trip)
- [ ] PUT /api/v1/trips/{id}/ (update trip)

### 4.8 Purchase Order API
- [ ] GET /api/v1/purchase-orders/ (list POs)
- [ ] GET /api/v1/purchase-orders/{id}/ (PO detail)
- [ ] POST /api/v1/purchase-orders/ (create PO)
- [ ] PUT /api/v1/purchase-orders/{id}/ (update PO)

### 4.9 Transfer API
- [ ] GET /api/v1/transfers/ (list transfers)
- [ ] GET /api/v1/transfers/{id}/ (transfer detail)
- [ ] POST /api/v1/transfers/ (create transfer)
- [ ] PUT /api/v1/transfers/{id}/ (update transfer)

### 4.10 Waste Report API
- [ ] GET /api/v1/waste-reports/ (list waste reports)
- [ ] GET /api/v1/waste-reports/{id}/ (waste report detail)
- [ ] POST /api/v1/waste-reports/ (create waste report)
- [ ] PUT /api/v1/waste-reports/{id}/ (update waste report)

## 5. SECURITY FEATURE TESTS
============================

### 5.1 Rate Limiting Tests
- [ ] Test authentication rate limit (5/minute)
- [ ] Test API read rate limit (100/minute)
- [ ] Test API write rate limit (30/minute)
- [ ] Test bulk operation rate limit (5/minute)
- [ ] Verify rate limit headers in responses
- [ ] Test rate limit reset after cooldown

### 5.2 Security Headers Tests
- [ ] Verify X-Content-Type-Options: nosniff
- [ ] Verify X-Frame-Options: DENY
- [ ] Verify X-XSS-Protection header
- [ ] Verify Content-Security-Policy header
- [ ] Verify Referrer-Policy header
- [ ] Verify cache control headers on API responses

### 5.3 Brute Force Protection Tests
- [ ] Test login failure tracking
- [ ] Test account lockout after 5 failures
- [ ] Test lockout cooldown (30 minutes)
- [ ] Test successful login resets counter
- [ ] Test IP-based blocking

### 5.4 CORS and CSRF Tests
- [ ] Test CORS headers on API responses
- [ ] Test CSRF token validation on forms
- [ ] Test preflight requests handling
- [ ] Test cross-origin request blocking

## 6. FRONTEND INTEGRATION TESTS
================================

### 6.1 Dashboard and Navigation
- [ ] Main dashboard loads correctly
- [ ] Navigation menu works
- [ ] Quick action cards function
- [ ] Statistics display correctly
- [ ] Responsive design works on mobile

### 6.2 Vessel Management Pages
- [ ] Vessel list page loads and displays data
- [ ] Vessel detail page shows correct information
- [ ] Vessel creation form works
- [ ] Vessel editing form works
- [ ] Vessel deletion confirmation works

### 6.3 Product Management Pages
- [ ] Product list page loads with search/filter
- [ ] Product detail page shows stock levels
- [ ] Product creation form works
- [ ] Product editing form works
- [ ] Category assignment works

### 6.4 Transaction Pages
- [ ] Sales entry form creates transactions
- [ ] Supply entry form creates inventory lots
- [ ] Transfer entry form creates transfer transactions
- [ ] Waste entry form creates waste transactions
- [ ] Transaction list page displays correctly

### 6.5 Reporting Pages
- [ ] Daily reports generate correctly
- [ ] Monthly reports display data
- [ ] Trip reports show sales data
- [ ] PO reports display purchase information
- [ ] Transfer reports show movement data

### 6.6 User Management Pages
- [ ] User list page displays all users
- [ ] User creation form works
- [ ] User editing form works
- [ ] Group assignment works
- [ ] Permission management works

### 6.7 Unified Dropdown System
- [ ] Vessel dropdowns work on all pages
- [ ] Product search dropdown functions
- [ ] Z-index management prevents conflicts
- [ ] Dropdown styling is consistent
- [ ] Mobile dropdown behavior works

## 7. DATABASE INTEGRITY TESTS
==============================

### 7.1 Model Constraints
- [ ] Test positive quantity constraints
- [ ] Test positive price constraints
- [ ] Test date range constraints
- [ ] Test unique field constraints
- [ ] Test foreign key constraints

### 7.2 FIFO Integrity
- [ ] Test inventory lot consumption order
- [ ] Test remaining quantity calculations
- [ ] Test FIFO consumption record creation
- [ ] Test cost tracking accuracy
- [ ] Test inventory reconciliation

### 7.3 Transaction Atomicity
- [ ] Test transaction rollback on errors
- [ ] Test concurrent transaction handling
- [ ] Test inventory consistency during failures
- [ ] Test database lock behavior

### 7.4 Data Migration
- [ ] Test all migrations apply cleanly
- [ ] Test migration rollback functionality
- [ ] Test data integrity after migrations
- [ ] Test schema changes work correctly

## 8. PERFORMANCE & LOAD TESTS
==============================

### 8.1 Database Query Performance
- [ ] Test query execution times
- [ ] Verify index usage on frequent queries
- [ ] Test pagination performance
- [ ] Check for N+1 query problems

### 8.2 API Response Times
- [ ] Test API endpoint response times
- [ ] Test large dataset handling
- [ ] Test concurrent API requests
- [ ] Test bulk operation performance

### 8.3 Cache Performance
- [ ] Test cache hit/miss ratios
- [ ] Test cache invalidation
- [ ] Test cache warming strategies
- [ ] Test memory usage patterns

### 8.4 Load Testing
- [ ] Test concurrent user sessions
- [ ] Test high transaction volume
- [ ] Test memory usage under load
- [ ] Test system stability under stress

## 9. EXPORT & REPORTING TESTS
==============================

### 9.1 PDF Export Tests
- [ ] Test daily report PDF generation
- [ ] Test monthly report PDF generation
- [ ] Test trip report PDF generation
- [ ] Test inventory report PDF generation
- [ ] Verify PDF formatting and styling

### 9.2 Excel Export Tests
- [ ] Test transaction list Excel export
- [ ] Test inventory data Excel export
- [ ] Test sales report Excel export
- [ ] Verify Excel file structure and data

### 9.3 Data Accuracy Tests
- [ ] Verify exported data matches database
- [ ] Test date range filtering in exports
- [ ] Test currency formatting in exports
- [ ] Test multilingual content in exports

## 10. MANAGEMENT COMMANDS TESTS
================================

### 10.1 Inventory Management Commands
- [ ] `python manage.py rebuild_inventory_lots`
- [ ] `python manage.py check_db_integrity --verbose --fix`
- [ ] `python manage.py reconcile_inventory`
- [ ] `python manage.py verify_inventory_rebuild`

### 10.2 Authentication Commands
- [ ] `python manage.py activate_auth`
- [ ] User creation and permission assignment

### 10.3 Cache Management Commands
- [ ] `python manage.py monitor_cache`
- [ ] Cache clearing and warming

### 10.4 Security Commands
- [ ] `python manage.py check_security --detailed`
- [ ] `python manage.py check --deploy`

### 10.5 API Documentation Commands
- [ ] `python manage.py spectacular --color --file api_schema.yml`
- [ ] API schema generation and validation

## TESTING PROCEDURES
====================

### Environment Setup
1. Ensure clean database state
2. Create test data using fixtures
3. Set up test users with different permissions
4. Configure test settings appropriately

### Test Execution Order
1. Run core system tests first
2. Test authentication and security
3. Test FIFO inventory operations
4. Test REST API endpoints
5. Test frontend integration
6. Run performance tests last

### Data Validation
- Always verify data integrity after operations
- Check inventory lot consistency
- Validate FIFO consumption records
- Confirm transaction atomicity

### Error Handling
- Test both success and failure scenarios
- Verify proper error messages
- Check logging functionality
- Test graceful degradation

### Documentation
- Document any test failures
- Record performance benchmarks
- Note any configuration issues
- Update test scenarios as needed

## AUTOMATED TESTING COMMANDS
=============================

```bash
# Run Django system checks
python manage.py check --deploy

# Run database migrations
python manage.py migrate

# Test inventory integrity
python manage.py check_db_integrity --verbose

# Rebuild inventory lots
python manage.py rebuild_inventory_lots

# Test security configuration
python manage.py check_security --detailed

# Generate API documentation
python manage.py spectacular --color --file api_schema.yml

# Test cache functionality
python manage.py monitor_cache

# Start development server
python manage.py runserver
```

## API TESTING WITH CURL EXAMPLES
=================================

### Authentication
```bash
# Get JWT token
curl -X POST http://localhost:8000/api/auth/token/ \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "password"}'

# Use token for authenticated requests
curl -X GET http://localhost:8000/api/v1/vessels/ \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"
```

### Vessel Operations
```bash
# List vessels
curl -X GET http://localhost:8000/api/v1/vessels/ \
  -H "Authorization: Bearer YOUR_TOKEN"

# Create vessel
curl -X POST http://localhost:8000/api/v1/vessels/ \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"name": "Test Vessel", "has_duty_free": true}'

# Get vessel inventory
curl -X GET http://localhost:8000/api/v1/vessels/1/inventory_summary/ \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### Product Operations
```bash
# List products
curl -X GET http://localhost:8000/api/v1/products/ \
  -H "Authorization: Bearer YOUR_TOKEN"

# Search products
curl -X GET "http://localhost:8000/api/v1/products/search/?search=coffee" \
  -H "Authorization: Bearer YOUR_TOKEN"

# Get stock levels
curl -X GET http://localhost:8000/api/v1/products/1/stock_levels/ \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### Transaction Operations
```bash
# Create supply transaction
curl -X POST http://localhost:8000/api/v1/transactions/ \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "vessel": 1,
    "product": 1,
    "transaction_type": "SUPPLY",
    "quantity": 100,
    "unit_price": "5.50",
    "transaction_date": "2025-08-17"
  }'

# Create sale transaction
curl -X POST http://localhost:8000/api/v1/transactions/ \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "vessel": 1,
    "product": 1,
    "transaction_type": "SALE",
    "quantity": 10,
    "unit_price": "7.00",
    "transaction_date": "2025-08-17"
  }'
```

## BROWSER TESTING CHECKLIST
============================

### Page Load Tests
- [ ] http://localhost:8000/ (Dashboard)
- [ ] http://localhost:8000/vessels/ (Vessel List)
- [ ] http://localhost:8000/products/ (Product List)
- [ ] http://localhost:8000/transactions/ (Transaction List)
- [ ] http://localhost:8000/sales_entry/ (Sales Entry)
- [ ] http://localhost:8000/supply_entry/ (Supply Entry)
- [ ] http://localhost:8000/reports/ (Reports Dashboard)
- [ ] http://localhost:8000/admin/ (Admin Interface)

### API Documentation
- [ ] http://localhost:8000/api/docs/ (Swagger UI)
- [ ] http://localhost:8000/api/v1/ (API Root)

### Mobile Responsiveness
- [ ] Test on mobile browsers
- [ ] Test dropdown functionality on touch devices
- [ ] Test form input on mobile
- [ ] Test navigation on small screens

## EXPECTED RESULTS
==================

### System Health Indicators
- Server starts without errors
- All URLs resolve correctly
- Database queries execute efficiently
- No memory leaks during operation
- Proper error handling and logging

### Data Integrity Indicators
- FIFO calculations are accurate
- Inventory levels match transaction history
- All constraints are enforced
- Transaction atomicity is maintained
- Cost tracking is precise

### Security Indicators
- Authentication works properly
- Authorization is enforced
- Rate limiting functions correctly
- Security headers are present
- Brute force protection is active

### Performance Indicators
- Page load times under 2 seconds
- API response times under 500ms
- Database queries optimized
- Cache hit ratios above 80%
- Memory usage stable under load

## TROUBLESHOOTING COMMON ISSUES
================================

### Database Issues
- Constraint violations: Check model validation
- Migration errors: Run with --verbosity=2
- Performance issues: Check query optimization
- Lock timeouts: Review transaction scope

### API Issues
- Authentication failures: Check JWT configuration
- Permission errors: Verify user permissions
- Rate limiting: Check middleware configuration
- CORS errors: Review CORS settings
- Category 'products' attribute error: FIXED - Added related_name='products' to Product.category ForeignKey

### Frontend Issues
- Dropdown problems: Check z-index management
- Form submission errors: Verify CSRF tokens
- Display issues: Check CSS/JS loading
- Mobile problems: Test responsive design

### Security Issues
- Login failures: Check axes configuration
- Rate limit bypasses: Verify middleware order
- Header missing: Check security middleware
- CSRF problems: Verify token handling

## MAINTENANCE SCHEDULE
======================

### Daily Checks
- [ ] System startup and health
- [ ] Error log review
- [ ] Performance monitoring
- [ ] Security alerts review

### Weekly Checks
- [ ] Full test suite execution
- [ ] Database integrity checks
- [ ] Security configuration review
- [ ] Performance benchmarking

### Monthly Checks
- [ ] Dependency updates
- [ ] Security patch review
- [ ] Load testing execution
- [ ] Documentation updates

## TEST DATA REQUIREMENTS
=========================

### Minimum Test Data
- 3 vessels (1 duty-free, 2 regular)
- 20 products across 5 categories
- 100 transactions (supply/sales/transfers/waste)
- 5 users with different permission levels
- 10 inventory lots with varying quantities

### Test Scenarios Data
- Products with zero stock
- Products with multiple lots
- Vessels with no inventory
- Completed and pending trips
- Various transaction types and dates

---

## NOTES
========

This comprehensive test file should be used to validate the entire Vessel Sales System after any major changes, especially after implementing the REST API and security enhancements. 

Regular execution of these tests ensures system reliability, data integrity, and security compliance.

Update this file as new features are added or requirements change.