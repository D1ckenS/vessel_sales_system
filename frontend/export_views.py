from django.utils import timezone
from datetime import datetime, timedelta, date
from django.contrib.auth.decorators import login_required
import calendar
from django.db.models import Sum, Count, F, Q
import json
from .utils import BilingualMessages
from django.http import JsonResponse
from transactions.models import Transaction, InventoryLot, Trip, PurchaseOrder
from vessels.models import Vessel
from .utils.exports import ExcelExporter, PDFExporter

@login_required
def export_inventory(request):
    """Export inventory data to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        import json
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')  # 'excel' or 'pdf'
        vessel_id = data.get('vessel_id')
        
        # Get vessel and inventory data (similar to inventory_data_ajax)
        vessel = Vessel.objects.get(id=vessel_id, active=True)
        
        # Get inventory data (reuse logic from inventory_data_ajax)
        available_lots = InventoryLot.objects.filter(
            vessel=vessel,
            remaining_quantity__gt=0,
            product__active=True
        ).select_related('product')
        
        inventory_summary = available_lots.values(
            'product__id', 'product__name', 'product__item_id', 
            'product__barcode', 'product__is_duty_free'
        ).annotate(
            total_quantity=Sum('remaining_quantity')
        ).order_by('product__item_id')
        
        # Prepare data for export
        headers = ['Product Name', 'Item ID', 'Barcode', 'Stock Quantity', 'Current Cost (JOD)', 'Total Value (JOD)', 'Status']
        
        data_rows = []
        for item in inventory_summary:
            product_id = item['product__id']
            total_qty = item['total_quantity']
            
            # Get current cost (oldest lot)
            lots = InventoryLot.objects.filter(
                vessel=vessel,
                product_id=product_id,
                remaining_quantity__gt=0
            ).order_by('purchase_date', 'created_at')
            
            current_cost = lots.first().purchase_price if lots.exists() else 0
            total_value = sum(lot.remaining_quantity * lot.purchase_price for lot in lots)
            
            # Determine status
            if total_qty == 0:
                status = 'Out of Stock'
            elif total_qty <= 10:
                status = 'Low Stock'
            else:
                status = 'Good Stock'
                
            data_rows.append([
                item['product__name'],
                item['product__item_id'],
                item['product__barcode'] or 'N/A',
                total_qty,
                f"{current_cost:.3f}",
                f"{total_value:.3f}",
                status
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"inventory_{vessel.name}_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Vessel': vessel.name,
            'Total Products': len(data_rows),
            'Generated By': request.user.username
        }
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title(f"{vessel.name} Inventory Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_headers(headers)
            exporter.add_data_rows(data_rows)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title(f"{vessel.name} Inventory Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_table(headers, data_rows)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_transactions(request):
    """Export transaction data to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        import json
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        
        # Get filter parameters
        vessel_filter = data.get('vessel_filter')
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        transaction_type_filter = data.get('transaction_type_filter')
        
        # Build query (similar to comprehensive_report view)
        transactions = Transaction.objects.select_related(
            'vessel', 'product', 'created_by', 'trip', 'purchase_order'
        ).order_by('-transaction_date', '-created_at')
        
        # Apply filters
        if vessel_filter:
            transactions = transactions.filter(vessel_id=vessel_filter)
        if date_from:
            transactions = transactions.filter(transaction_date__gte=date_from)
        if date_to:
            transactions = transactions.filter(transaction_date__lte=date_to)
        if transaction_type_filter:
            transactions = transactions.filter(transaction_type=transaction_type_filter)
        
        # Prepare data
        headers = ['Date', 'Type', 'Vessel', 'Product', 'Quantity', 'Unit Price (JOD)', 'Total Amount (JOD)', 'Reference', 'Created By']
        
        data_rows = []
        for transaction in transactions[:1000]:  # Limit to 1000 rows for performance
            reference = ""
            if transaction.trip:
                reference = f"Trip: {transaction.trip.trip_number}"
            elif transaction.purchase_order:
                reference = f"PO: {transaction.purchase_order.po_number}"
            elif transaction.transfer_to_vessel:
                reference = f"To: {transaction.transfer_to_vessel.name}"
            
            data_rows.append([
                transaction.transaction_date.strftime('%d/%m/%Y'),
                transaction.get_transaction_type_display(),
                transaction.vessel.name,
                transaction.product.name,
                transaction.quantity,
                f"{transaction.unit_price:.3f}",
                f"{transaction.total_amount:.3f}",
                reference,
                transaction.created_by.username if transaction.created_by else 'System'
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"transactions_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Total Transactions': len(data_rows),
            'Filters Applied': 'Yes' if any([vessel_filter, date_from, date_to, transaction_type_filter]) else 'No',
            'Generated By': request.user.username
        }
        
        if date_from:
            metadata['Date From'] = date_from
        if date_to:
            metadata['Date To'] = date_to
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title("Transaction Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_headers(headers)
            exporter.add_data_rows(data_rows)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title("Transaction Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_table(headers, data_rows)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_trips(request):
    """Export trip reports to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        import json
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        
        # Get filter parameters
        vessel_filter = data.get('vessel_filter')
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        status_filter = data.get('status_filter')
        
        # Build query
        trips = Trip.objects.select_related('vessel', 'created_by')
        
        if vessel_filter:
            trips = trips.filter(vessel_id=vessel_filter)
        if date_from:
            trips = trips.filter(trip_date__gte=date_from)
        if date_to:
            trips = trips.filter(trip_date__lte=date_to)
        if status_filter == 'completed':
            trips = trips.filter(is_completed=True)
        elif status_filter == 'in_progress':
            trips = trips.filter(is_completed=False)
        
        trips = trips.order_by('-trip_date', '-created_at')
        
        # Prepare data
        headers = ['Trip Number', 'Vessel', 'Trip Date', 'Passengers', 'Revenue (JOD)', 'Items Sold', 'Status', 'Created By', 'Revenue per Passenger']
        
        data_rows = []
        for trip in trips:
            revenue = trip.total_revenue
            items_sold = trip.total_items_sold
            revenue_per_passenger = revenue / trip.passenger_count if trip.passenger_count > 0 else 0
            
            data_rows.append([
                trip.trip_number,
                trip.vessel.name,
                trip.trip_date.strftime('%d/%m/%Y'),
                trip.passenger_count,
                f"{revenue:.3f}",
                items_sold,
                'Completed' if trip.is_completed else 'In Progress',
                trip.created_by.username if trip.created_by else 'System',
                f"{revenue_per_passenger:.3f}"
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"trip_reports_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Total Trips': len(data_rows),
            'Generated By': request.user.username
        }
        
        if vessel_filter:
            vessel = Vessel.objects.get(id=vessel_filter)
            metadata['Vessel Filter'] = vessel.name
        if date_from:
            metadata['Date From'] = date_from
        if date_to:
            metadata['Date To'] = date_to
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title("Trip Reports", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_headers(headers)
            exporter.add_data_rows(data_rows)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title("Trip Reports", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_table(headers, data_rows)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_purchase_orders(request):
    """Export purchase order reports to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        import json
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        
        # Get filter parameters
        vessel_filter = data.get('vessel_filter')
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        status_filter = data.get('status_filter')
        
        # Build query
        purchase_orders = PurchaseOrder.objects.select_related('vessel', 'created_by')
        
        if vessel_filter:
            purchase_orders = purchase_orders.filter(vessel_id=vessel_filter)
        if date_from:
            purchase_orders = purchase_orders.filter(po_date__gte=date_from)
        if date_to:
            purchase_orders = purchase_orders.filter(po_date__lte=date_to)
        if status_filter == 'completed':
            purchase_orders = purchase_orders.filter(is_completed=True)
        elif status_filter == 'in_progress':
            purchase_orders = purchase_orders.filter(is_completed=False)
        
        purchase_orders = purchase_orders.order_by('-po_date', '-created_at')
        
        # Prepare data
        headers = ['PO Number', 'Vessel', 'PO Date', 'Total Cost (JOD)', 'Items Count', 'Status', 'Created By', 'Average Cost per Item']
        
        data_rows = []
        for po in purchase_orders:
            total_cost = po.total_cost
            items_count = po.transaction_count
            avg_cost_per_item = total_cost / items_count if items_count > 0 else 0
            
            data_rows.append([
                po.po_number,
                po.vessel.name,
                po.po_date.strftime('%d/%m/%Y'),
                f"{total_cost:.3f}",
                items_count,
                'Completed' if po.is_completed else 'In Progress',
                po.created_by.username if po.created_by else 'System',
                f"{avg_cost_per_item:.3f}"
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"purchase_order_reports_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Total Purchase Orders': len(data_rows),
            'Generated By': request.user.username
        }
        
        if vessel_filter:
            vessel = Vessel.objects.get(id=vessel_filter)
            metadata['Vessel Filter'] = vessel.name
        if date_from:
            metadata['Date From'] = date_from
        if date_to:
            metadata['Date To'] = date_to
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title("Purchase Order Reports", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_headers(headers)
            exporter.add_data_rows(data_rows)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title("Purchase Order Reports", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            exporter.add_table(headers, data_rows)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_monthly_report(request):
    """Export monthly report to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        selected_month = int(data.get('month', datetime.now().month))
        selected_year = int(data.get('year', datetime.now().year))
        
        # Calculate month date range
        
        first_day = date(selected_year, selected_month, 1)
        if selected_month == 12:
            last_day = date(selected_year + 1, 1, 1) - timedelta(days=1)
        else:
            last_day = date(selected_year, selected_month + 1, 1) - timedelta(days=1)
        
        # Get monthly transactions
        monthly_transactions = Transaction.objects.filter(
            transaction_date__gte=first_day,
            transaction_date__lte=last_day
        )
        
        # Calculate stats using F() expressions
        monthly_stats = monthly_transactions.aggregate(
            total_revenue=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SALE')),
            total_costs=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SUPPLY')),
            total_transactions=Count('id'),
            sales_count=Count('id', filter=Q(transaction_type='SALE')),
            supply_count=Count('id', filter=Q(transaction_type='SUPPLY')),
        )
        
        monthly_revenue = monthly_stats['total_revenue'] or 0
        monthly_costs = monthly_stats['total_costs'] or 0
        monthly_profit = monthly_revenue - monthly_costs
        
        # Get vessel performance
        vessels = Vessel.objects.filter(active=True)
        vessel_performance = []
        
        for vessel in vessels:
            vessel_transactions = monthly_transactions.filter(vessel=vessel)
            vessel_stats = vessel_transactions.aggregate(
                revenue=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SALE')),
                costs=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SUPPLY')),
                sales_count=Count('id', filter=Q(transaction_type='SALE')),
                supply_count=Count('id', filter=Q(transaction_type='SUPPLY')),
            )
            
            vessel_revenue = vessel_stats['revenue'] or 0
            vessel_costs = vessel_stats['costs'] or 0
            vessel_profit = vessel_revenue - vessel_costs
            
            vessel_performance.append([
                vessel.name,
                f"{vessel_revenue:.3f}",
                f"{vessel_costs:.3f}",
                f"{vessel_profit:.3f}",
                vessel_stats['sales_count'] or 0,
                vessel_stats['supply_count'] or 0
            ])
        
        # Generate filename
        month_name = calendar.month_name[selected_month]
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"monthly_report_{month_name}_{selected_year}_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Report Month': f"{month_name} {selected_year}",
            'Total Revenue (JOD)': f"{monthly_revenue:.3f}",
            'Total Costs (JOD)': f"{monthly_costs:.3f}",
            'Total Profit (JOD)': f"{monthly_profit:.3f}",
            'Total Transactions': monthly_stats['total_transactions'] or 0,
            'Generated By': request.user.username
        }
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title(f"Monthly Report - {month_name} {selected_year}", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            # Add vessel performance table
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit (JOD)', 'Sales Count', 'Supply Count']
            exporter.add_headers(headers)
            exporter.add_data_rows(vessel_performance)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title(f"Monthly Report - {month_name} {selected_year}", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit (JOD)', 'Sales Count', 'Supply Count']
            exporter.add_table(headers, vessel_performance)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_daily_report(request):
    """Export daily report to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        selected_date_str = data.get('date', datetime.now().strftime('%Y-%m-%d'))
        
        selected_date = datetime.strptime(selected_date_str, '%Y-%m-%d').date()
        
        # Get daily transactions
        daily_transactions = Transaction.objects.filter(transaction_date=selected_date)
        
        # Calculate daily stats
        daily_stats = daily_transactions.aggregate(
            total_revenue=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SALE')),
            total_costs=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SUPPLY')),
            total_transactions=Count('id'),
            sales_count=Count('id', filter=Q(transaction_type='SALE')),
            supply_count=Count('id', filter=Q(transaction_type='SUPPLY')),
        )
        
        daily_revenue = daily_stats['total_revenue'] or 0
        daily_costs = daily_stats['total_costs'] or 0
        daily_profit = daily_revenue - daily_costs
        
        # Get vessel breakdown
        vessels = Vessel.objects.filter(active=True)
        vessel_breakdown = []
        
        for vessel in vessels:
            vessel_transactions = daily_transactions.filter(vessel=vessel)
            vessel_stats = vessel_transactions.aggregate(
                revenue=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SALE')),
                costs=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SUPPLY')),
                sales_count=Count('id', filter=Q(transaction_type='SALE')),
                supply_count=Count('id', filter=Q(transaction_type='SUPPLY')),
            )
            
            vessel_revenue = vessel_stats['revenue'] or 0
            vessel_costs = vessel_stats['costs'] or 0
            vessel_profit = vessel_revenue - vessel_costs
            
            vessel_breakdown.append([
                vessel.name,
                f"{vessel_revenue:.3f}",
                f"{vessel_costs:.3f}",
                f"{vessel_profit:.3f}",
                vessel_stats['sales_count'] or 0,
                vessel_stats['supply_count'] or 0
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"daily_report_{selected_date.strftime('%Y%m%d')}_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Report Date': selected_date.strftime('%d/%m/%Y'),
            'Total Revenue (JOD)': f"{daily_revenue:.3f}",
            'Total Costs (JOD)': f"{daily_costs:.3f}",
            'Total Profit (JOD)': f"{daily_profit:.3f}",
            'Total Transactions': daily_stats['total_transactions'] or 0,
            'Generated By': request.user.username
        }
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title(f"Daily Report - {selected_date.strftime('%d/%m/%Y')}", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit (JOD)', 'Sales Count', 'Supply Count']
            exporter.add_headers(headers)
            exporter.add_data_rows(vessel_breakdown)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title(f"Daily Report - {selected_date.strftime('%d/%m/%Y')}", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit (JOD)', 'Sales Count', 'Supply Count']
            exporter.add_table(headers, vessel_breakdown)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def export_analytics_report(request):
    """Export analytics report to Excel or PDF"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'POST method required'})
    
    try:
        data = json.loads(request.body)
        export_format = data.get('format', 'excel')
        
        
        today = timezone.now().date()
        last_30_days = today - timedelta(days=30)
        last_90_days = today - timedelta(days=90)
        
        # Get revenue KPIs (last 30 days)
        revenue_30_days = Transaction.objects.filter(
            transaction_type='SALE',
            transaction_date__gte=last_30_days
        ).aggregate(
            total_revenue=Sum(F('unit_price') * F('quantity')),
            transaction_count=Count('id')
        )
        
        # Get vessel analytics
        vessel_analytics = []
        for vessel in Vessel.objects.filter(active=True):
            vessel_transactions = Transaction.objects.filter(
                vessel=vessel,
                transaction_date__gte=last_30_days
            )
            
            vessel_stats = vessel_transactions.aggregate(
                revenue=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SALE')),
                costs=Sum(F('unit_price') * F('quantity'), filter=Q(transaction_type='SUPPLY')),
                sales_count=Count('id', filter=Q(transaction_type='SALE')),
            )
            
            vessel_revenue = vessel_stats['revenue'] or 0
            vessel_costs = vessel_stats['costs'] or 0
            profit_margin = ((vessel_revenue - vessel_costs) / vessel_revenue * 100) if vessel_revenue > 0 else 0
            
            vessel_analytics.append([
                vessel.name,
                f"{vessel_revenue:.3f}",
                f"{vessel_costs:.3f}",
                f"{profit_margin:.1f}%",
                vessel_stats['sales_count'] or 0
            ])
        
        # Generate filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename_base = f"analytics_report_{timestamp}"
        
        # Metadata
        metadata = {
            'Export Date': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'Analysis Period': 'Last 30 Days',
            'Total Revenue (JOD)': f"{revenue_30_days['total_revenue'] or 0:.3f}",
            'Total Transactions': revenue_30_days['transaction_count'] or 0,
            'Generated By': request.user.username
        }
        
        if export_format == 'excel':
            exporter = ExcelExporter()
            exporter.add_title("Analytics Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit Margin (%)', 'Sales Count']
            exporter.add_headers(headers)
            exporter.add_data_rows(vessel_analytics)
            
            return exporter.get_response(f"{filename_base}.xlsx")
            
        else:  # PDF
            exporter = PDFExporter()
            exporter.add_title("Analytics Report", f"Generated on {datetime.now().strftime('%d/%m/%Y')}")
            exporter.add_metadata(metadata)
            
            headers = ['Vessel', 'Revenue (JOD)', 'Costs (JOD)', 'Profit Margin (%)', 'Sales Count']
            exporter.add_table(headers, vessel_analytics)
            
            return exporter.get_response(f"{filename_base}.pdf")
            
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})